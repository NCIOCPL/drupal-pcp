<?php

/**
 * Implements hook_theme_registry_alter().
 */
function pcp_meeting_theme_registry_alter(&$theme_registry) {
	// Defined path to the current module.
	$module_path = drupal_get_path('module', 'pcp_meeting');
	// Find all .tpl.php files in this module's folder recursively.
	$template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
	// Iterate through all found template file objects.
	foreach ($template_file_objects as $key => $template_file_object) {
		// If the template has not already been overridden by a theme.
		if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
			// Alter the theme path and template elements.
			$theme_registry[$key]['theme path'] = $module_path;
			$theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
			$theme_registry[$key]['type'] = 'module';
		}
	}
}

/**
 * Implementation of hook_form_FORM_ID_alter
 * 
 * Hiding taxonomy term description field pcptheme_form_taxonomy_form_term_alter
 */
function pcp_meeting_form_meeting_node_form_alter(&$form, &$form_state) {
	// hide non-desired fields.
	$form['path']['#access'] = FALSE;

	// add validation - only one link or PDF per series link entry.
	$form['#validate'][] = '_pcp_meeting_node_validate';
}

function _pcp_meeting_node_validate($form, &$form_state) {
	// check each series link subfield, and require that a link and a PDF not
	// both be set for any given subfield.
	foreach ($form_state['values']['field_series_links'] as $langcode => $items) {
		foreach ($items as $index => $item) {
			if (is_array($item) &&
				!empty($item['field_link'][$langcode][0]['value']) &&
				($item['field_pdf'][$langcode][0]['fid'] != 0)) {
				form_set_error("field_series_links][$langcode][$index", t("Please only specify a link or a PDF in each Series Link subfield."));
			}
		}
	}
}

function pcp_meeting_node_view_alter(&$build) {
	if($build['#entity_type'] == 'node' &&
		$build['#bundle'] == 'meeting' &&
		$build['#view_mode'] == 'full') {
		
		$node = $build['#node'];
		$crumbs[] = l('Home', '<front>');
		

		$series_items = field_get_items('node', $node, 'field_series');
        $series_title = $node->title;
        // dpm($node);
		$series_status = $series_items[0]['taxonomy_term']->field_series_status['und'][0]['value'];
        //$series_status = $series_items[0]['taxonomy_term']->field_series_status['und'][0]['value'];
        switch($series_status) {
            case 0:
                $series_status_text = 'past_reports';
                $series_status_title = 'Reports';
                break;
            case 1:
                $series_status_text = 'current_series';
                $series_status_title = 'Current Series';
                break;
            case 2:
                $series_status_text = 'subsections';
                $series_status_title = 'About';
                break;
            case 3:
                $series_status_text = 'members';
                $series_status_title = 'Members';
                break;
            case 4:
                $series_status_text = 'blogs';
                $series_status_title = 'Blogs';
                break;
            default:
                $series_status_text = 'past_reports';
                $series_status_title = 'Reports';
        }
       // dpm($series_items);
        // dpm($series_status_text);
        // retrieve the first section matching the choses series status - defunct
		$status_query = new EntityFieldQuery();
		$status_query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'pcp_section')
			->propertyCondition('status', NODE_PUBLISHED)
			->fieldCondition('field_order', 'value', '0', '>')
			->fieldCondition('field_section_type', 'value', $series_status_text, '=');

		$result = $status_query->execute();
        //dpm($result);
		// find the series title
		if (isset($result['node'])) {
			foreach ($result['node'] as $nid => $section_node) {
				$sql = 'SELECT title FROM {node} WHERE nid = :nid';
				$title_result = db_query($sql, array(':nid' => $nid));
				$section_title = $title_result->fetchField();
				break;
			}
		}
		// dpm($result);
        // dpm($section_title);
		// convert to an anchor link and add to breadcrumbs
		if(module_load_include('inc','pathauto','pathauto') !== FALSE) {
			if (function_exists('pathauto_cleanstring')) {
				//$anchor = pathauto_cleanstring($section_title);
				//$crumbs[] = l($section_title, '/', array('fragment' => $anchor));
                $anchor = pathauto_cleanstring($series_status_title);
                $crumbs[] = l($series_status_title, '/', array('fragment' => $anchor));
                $crumbs[] = $series_title;
				// render the current date
				//$crumbs[] = trim(strip_tags(drupal_render($build['field_date'])));

				drupal_set_breadcrumb($crumbs);
			}
		}
	}
}